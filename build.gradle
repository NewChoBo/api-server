plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'jjk.api'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 추가된 라이브러리
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
    compileOnly 'jakarta.annotation:jakarta.annotation-api'
    compileOnly 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'javax.persistence:javax.persistence-api:2.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 설정
def querydslDir = layout.buildDirectory.dir("generated/querydsl")

sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.register('generateQueryDSL', JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    destinationDirectory.set(querydslDir.get().asFile)
    options.compilerArgs = [
            '-proc:only',
            '-processor', 'com.querydsl.apt.jpa.JPAAnnotationProcessor',
            '-AjpaAnnotation=jakarta.persistence.Entity'
    ]
}

// compileJava 태스크가 QueryDSL 생성을 항상 먼저 실행하도록 설정
tasks.named('compileJava') {
    dependsOn(tasks.named('generateQueryDSL'))
}
